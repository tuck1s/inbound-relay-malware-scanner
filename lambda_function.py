import json, email, requests, os, time
from email import policy

# read config from env vars, where present
def getConfig():
    return {
        'sparkpost_host': os.getenv('SPARKPOST_HOST', 'https://api.sparkpost.com'),
        'sparkpost_api_key':  os.getenv('SPARKPOST_API_KEY'),
        'virustotal_api_key': os.getenv('VIRUSTOTAL_API_KEY'),
        'from_email':               os.getenv('FROM_EMAIL')
    }

#
# Handle SparkPost Inbound Relay Webhook carrying one or more messages
# TODO: check Authorisation in SparkPost inbound relay webhook
def lambda_handler(event, context):
    # Collect config
    cfg = getConfig()

    for i in event:
        m = i['msys']['relay_message']
        print('From:', m['msg_from'])
        print('To:', m['rcpt_to'])
        c= m['content']
        print('Subject:', c['subject'])
        body = c['email_rfc822']
        msg = email.message_from_string(body, policy=policy.default)

        counter = 0
        vtResource = []
        for part in msg.walk():
            # multipart/* are just containers
            if part.get_content_maintype() == 'multipart':
                continue
            ct = part.get_content_type()
            if ct == 'text/plain' or ct == 'text/html':
                pass
            else:
                p = part.get_payload(decode=True)
                res = requests.post('https://www.virustotal.com/vtapi/v2/file/scan', data= \
                    {'apikey': cfg['virustotal_api_key'], 'file': p})
                if res.status_code == 200:
                    scanRequest = res.json()
                    vtResource.append(scanRequest['resource'])                      # tuple, [1] indicates complete or not
                    counter += 1
                else:
                    print('Unexpected return code', res.status_code)
                    exit(1)
        print('VirusTotal scan underway, for', counter, 'attachments')
        # Now collect in the results which take some time to appear
        vtResourcePending = vtResource.copy()
        while(len(vtResourcePending) > 0):
            time.sleep(0.4)
            res2 = requests.get('https://www.virustotal.com/vtapi/v2/file/report', params= \
                            {'apikey': cfg['virustotal_api_key'], 'resource': vtResourcePending[0]})
            if res2.status_code == 200:
                del vtResourcePending[0]
                print(res.text)
                # Do more stuff here
                break
            elif res2.status_code == 204:
                continue
            else:
                print('Unexpected return code', res2.status_code)
                exit(1)
    return 'OK'

#
# Test code
with open('rq.json') as f:
    body = json.loads(f.read())
    print(lambda_handler(body, None))